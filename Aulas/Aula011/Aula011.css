/* main{
    width: 80%; /* O tamanho do main será sempre 80% do tamanho da tela */
    /* font-size: 1.5em; /* O tamanho do texto será proporcional ao elemento pai */
/* 
/* styles.css*/
/* @media (max-width: 768px){
    body{
        background-color: lightgray;
    }
}/* 

/*  img{
    max-width: 100%; /* A imagem nunca será maior do que o contêiner pai */
    /* height: auto; /* Mantém a proporão original */
/* 

/* Unidades Relativas */
/*% -- Baseado no tamanho do elemento pai 
rem -- Baseado no tamanho do root (html)
em -- Baseado no tamanho do elemento pai 
vw/vh -- Baseado na largura/altura da tela */


/* 
<img
        (fallback caso o navegador não suporte srcset)
    src="imagem-padrão.jpg"

    srcset="imagem-pequena.jpg 600w,  --> Versão para telas até ~600px
        imagem-media.jpg 1200w, --> Versão para telas até ~1200px
        imagem-grande.jpg 1800w" --> Versão para telas grandes

        sizes="(max-width: 600px) 100vw, --> Em telas pequenas: ocupa 100% da largura da tela
            (max-width: 1200px) 50vw, --> Em telas médias: ocupa 50% da largura da tela
            33vw" --> Em telas grande: ocupa 33% da largura da tela
/* 

/*
Flexbox - layouts flexíveis no CSS

main{
display: flex;
flex-direction: row;

row : intes dispostos na horizontal, da esquerda para a direita
row-reverse: inverte a ordem dos itens na horizontal
column: inverte a ordem dos itens na horizontal
column-reverse: inverte a ordem dos itens na vertical

justify-content:
flex-start: alinha a esquerda
flex-end: alinha a direita
center: centraliza os itens
space-between: distribui os itens com espaço entre eles
space-around: distribui os itens com espaço ao redor

align-items:
stretch: preenche o container
flex-start: alinha os itens no topo
flex-end: alinha os itens na base
center: centraliza os itens

gap: A propriedade gap permite criar espaçamento entre os itens sem precisar de margin

nth-child(x): pseudoclass

flexbox froggy


CSS Grid Layout

fr = fraçoes
.conteiner{
display: grid;
grid-template-columns:
grid-template-rows: 

grid-template-areas:
"header header header header"
"sidebar main main aside"
"footer footer footer footer";
min-height:100vh;


/* .container {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 20px;
}

/* Media query para telas maiores */
@media (min-width: 768px) {
    .container {
        flex-direction: row;
    }
}

.item {
    flex: 1;
    margin: 10px;
    padding: 20px;
    background-color: #f0f0f0;
    text-align: center;
}
